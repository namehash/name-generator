import logging
from typing import List, Tuple, Any

from .name_generator import NameGenerator
from ..input_name import InputName, Interpretation

logger = logging.getLogger('generator')


class FlagAffixGenerator(NameGenerator):
    """
    Adds suffix in the form of country emoji depending on the request's parameter. 
    If country is null or not in the flags mapping then 0 suggestions are returned.
    """

    def __init__(self, config):
        super().__init__(config)
        # todo
        self.country2emoji = {
            "AW": "ðŸ‡¦ðŸ‡¼",
            "AF": "ðŸ‡¦ðŸ‡«",
            "AO": "ðŸ‡¦ðŸ‡´",
            "AI": "ðŸ‡¦ðŸ‡®",
            "AX": "ðŸ‡¦ðŸ‡½",
            "AL": "ðŸ‡¦ðŸ‡±",
            "AD": "ðŸ‡¦ðŸ‡©",
            "AE": "ðŸ‡¦ðŸ‡ª",
            "AR": "ðŸ‡¦ðŸ‡·",
            "AM": "ðŸ‡¦ðŸ‡²",
            "AS": "ðŸ‡¦ðŸ‡¸",
            "AQ": "ðŸ‡¦ðŸ‡¶",
            "TF": "ðŸ‡¹ðŸ‡«",
            "AG": "ðŸ‡¦ðŸ‡¬",
            "AU": "ðŸ‡¦ðŸ‡º",
            "AT": "ðŸ‡¦ðŸ‡¹",
            "AZ": "ðŸ‡¦ðŸ‡¿",
            "BI": "ðŸ‡§ðŸ‡®",
            "BE": "ðŸ‡§ðŸ‡ª",
            "BJ": "ðŸ‡§ðŸ‡¯",
            "BF": "ðŸ‡§ðŸ‡«",
            "BD": "ðŸ‡§ðŸ‡©",
            "BG": "ðŸ‡§ðŸ‡¬",
            "BH": "ðŸ‡§ðŸ‡­",
            "BS": "ðŸ‡§ðŸ‡¸",
            "BA": "ðŸ‡§ðŸ‡¦",
            "BL": "ðŸ‡§ðŸ‡±",
            "SH": "ðŸ‡¸ðŸ‡­",
            "BY": "ðŸ‡§ðŸ‡¾",
            "BZ": "ðŸ‡§ðŸ‡¿",
            "BM": "ðŸ‡§ðŸ‡²",
            "BO": "ðŸ‡§ðŸ‡´",
            "BQ": "ðŸ‡§ðŸ‡¶",
            "BR": "ðŸ‡§ðŸ‡·",
            "BB": "ðŸ‡§ðŸ‡§",
            "BN": "ðŸ‡§ðŸ‡³",
            "BT": "ðŸ‡§ðŸ‡¹",
            "BV": "ðŸ‡§ðŸ‡»",
            "BW": "ðŸ‡§ðŸ‡¼",
            "CF": "ðŸ‡¨ðŸ‡«",
            "CA": "ðŸ‡¨ðŸ‡¦",
            "CC": "ðŸ‡¨ðŸ‡¨",
            "CH": "ðŸ‡¨ðŸ‡­",
            "CL": "ðŸ‡¨ðŸ‡±",
            "CN": "ðŸ‡¨ðŸ‡³",
            "CI": "ðŸ‡¨ðŸ‡®",
            "CM": "ðŸ‡¨ðŸ‡²",
            "CD": "ðŸ‡¨ðŸ‡©",
            "CG": "ðŸ‡¨ðŸ‡¬",
            "CK": "ðŸ‡¨ðŸ‡°",
            "CO": "ðŸ‡¨ðŸ‡´",
            "KM": "ðŸ‡°ðŸ‡²",
            "CV": "ðŸ‡¨ðŸ‡»",
            "CR": "ðŸ‡¨ðŸ‡·",
            "CU": "ðŸ‡¨ðŸ‡º",
            "CW": "ðŸ‡¨ðŸ‡¼",
            "CX": "ðŸ‡¨ðŸ‡½",
            "KY": "ðŸ‡°ðŸ‡¾",
            "CY": "ðŸ‡¨ðŸ‡¾",
            "CZ": "ðŸ‡¨ðŸ‡¿",
            "DE": "ðŸ‡©ðŸ‡ª",
            "DJ": "ðŸ‡©ðŸ‡¯",
            "DM": "ðŸ‡©ðŸ‡²",
            "DK": "ðŸ‡©ðŸ‡°",
            "DO": "ðŸ‡©ðŸ‡´",
            "DZ": "ðŸ‡©ðŸ‡¿",
            "EC": "ðŸ‡ªðŸ‡¨",
            "EG": "ðŸ‡ªðŸ‡¬",
            "ER": "ðŸ‡ªðŸ‡·",
            "EH": "ðŸ‡ªðŸ‡­",
            "ES": "ðŸ‡ªðŸ‡¸",
            "EE": "ðŸ‡ªðŸ‡ª",
            "ET": "ðŸ‡ªðŸ‡¹",
            "FI": "ðŸ‡«ðŸ‡®",
            "FJ": "ðŸ‡«ðŸ‡¯",
            "FK": "ðŸ‡«ðŸ‡°",
            "FR": "ðŸ‡«ðŸ‡·",
            "FO": "ðŸ‡«ðŸ‡´",
            "FM": "ðŸ‡«ðŸ‡²",
            "GA": "ðŸ‡¬ðŸ‡¦",
            "GB": "ðŸ‡¬ðŸ‡§",
            "GE": "ðŸ‡¬ðŸ‡ª",
            "GG": "ðŸ‡¬ðŸ‡¬",
            "GH": "ðŸ‡¬ðŸ‡­",
            "GI": "ðŸ‡¬ðŸ‡®",
            "GN": "ðŸ‡¬ðŸ‡³",
            "GP": "ðŸ‡¬ðŸ‡µ",
            "GM": "ðŸ‡¬ðŸ‡²",
            "GW": "ðŸ‡¬ðŸ‡¼",
            "GQ": "ðŸ‡¬ðŸ‡¶",
            "GR": "ðŸ‡¬ðŸ‡·",
            "GD": "ðŸ‡¬ðŸ‡©",
            "GL": "ðŸ‡¬ðŸ‡±",
            "GT": "ðŸ‡¬ðŸ‡¹",
            "GF": "ðŸ‡¬ðŸ‡«",
            "GU": "ðŸ‡¬ðŸ‡º",
            "GY": "ðŸ‡¬ðŸ‡¾",
            "HK": "ðŸ‡­ðŸ‡°",
            "HM": "ðŸ‡­ðŸ‡²",
            "HN": "ðŸ‡­ðŸ‡³",
            "HR": "ðŸ‡­ðŸ‡·",
            "HT": "ðŸ‡­ðŸ‡¹",
            "HU": "ðŸ‡­ðŸ‡º",
            "ID": "ðŸ‡®ðŸ‡©",
            "IM": "ðŸ‡®ðŸ‡²",
            "IN": "ðŸ‡®ðŸ‡³",
            "IO": "ðŸ‡®ðŸ‡´",
            "IE": "ðŸ‡®ðŸ‡ª",
            "IR": "ðŸ‡®ðŸ‡·",
            "IQ": "ðŸ‡®ðŸ‡¶",
            "IS": "ðŸ‡®ðŸ‡¸",
            "IL": "ðŸ‡®ðŸ‡±",
            "IT": "ðŸ‡®ðŸ‡¹",
            "JM": "ðŸ‡¯ðŸ‡²",
            "JE": "ðŸ‡¯ðŸ‡ª",
            "JO": "ðŸ‡¯ðŸ‡´",
            "JP": "ðŸ‡¯ðŸ‡µ",
            "KZ": "ðŸ‡°ðŸ‡¿",
            "KE": "ðŸ‡°ðŸ‡ª",
            "KG": "ðŸ‡°ðŸ‡¬",
            "KH": "ðŸ‡°ðŸ‡­",
            "KI": "ðŸ‡°ðŸ‡®",
            "KN": "ðŸ‡°ðŸ‡³",
            "KR": "ðŸ‡°ðŸ‡·",
            "XK": "ðŸ‡½ðŸ‡°",
            "KW": "ðŸ‡°ðŸ‡¼",
            "LA": "ðŸ‡±ðŸ‡¦",
            "LB": "ðŸ‡±ðŸ‡§",
            "LR": "ðŸ‡±ðŸ‡·",
            "LY": "ðŸ‡±ðŸ‡¾",
            "LC": "ðŸ‡±ðŸ‡¨",
            "LI": "ðŸ‡±ðŸ‡®",
            "LK": "ðŸ‡±ðŸ‡°",
            "LS": "ðŸ‡±ðŸ‡¸",
            "LT": "ðŸ‡±ðŸ‡¹",
            "LU": "ðŸ‡±ðŸ‡º",
            "LV": "ðŸ‡±ðŸ‡»",
            "MO": "ðŸ‡²ðŸ‡´",
            "MF": "ðŸ‡²ðŸ‡«",
            "MA": "ðŸ‡²ðŸ‡¦",
            "MC": "ðŸ‡²ðŸ‡¨",
            "MD": "ðŸ‡²ðŸ‡©",
            "MG": "ðŸ‡²ðŸ‡¬",
            "MV": "ðŸ‡²ðŸ‡»",
            "MX": "ðŸ‡²ðŸ‡½",
            "MH": "ðŸ‡²ðŸ‡­",
            "MK": "ðŸ‡²ðŸ‡°",
            "ML": "ðŸ‡²ðŸ‡±",
            "MT": "ðŸ‡²ðŸ‡¹",
            "MM": "ðŸ‡²ðŸ‡²",
            "ME": "ðŸ‡²ðŸ‡ª",
            "MN": "ðŸ‡²ðŸ‡³",
            "MP": "ðŸ‡²ðŸ‡µ",
            "MZ": "ðŸ‡²ðŸ‡¿",
            "MR": "ðŸ‡²ðŸ‡·",
            "MS": "ðŸ‡²ðŸ‡¸",
            "MQ": "ðŸ‡²ðŸ‡¶",
            "MU": "ðŸ‡²ðŸ‡º",
            "MW": "ðŸ‡²ðŸ‡¼",
            "MY": "ðŸ‡²ðŸ‡¾",
            "YT": "ðŸ‡¾ðŸ‡¹",
            "NA": "ðŸ‡³ðŸ‡¦",
            "NC": "ðŸ‡³ðŸ‡¨",
            "NE": "ðŸ‡³ðŸ‡ª",
            "NF": "ðŸ‡³ðŸ‡«",
            "NG": "ðŸ‡³ðŸ‡¬",
            "NI": "ðŸ‡³ðŸ‡®",
            "NU": "ðŸ‡³ðŸ‡º",
            "NL": "ðŸ‡³ðŸ‡±",
            "NO": "ðŸ‡³ðŸ‡´",
            "NP": "ðŸ‡³ðŸ‡µ",
            "NR": "ðŸ‡³ðŸ‡·",
            "NZ": "ðŸ‡³ðŸ‡¿",
            "OM": "ðŸ‡´ðŸ‡²",
            "PK": "ðŸ‡µðŸ‡°",
            "PA": "ðŸ‡µðŸ‡¦",
            "PN": "ðŸ‡µðŸ‡³",
            "PE": "ðŸ‡µðŸ‡ª",
            "PH": "ðŸ‡µðŸ‡­",
            "PW": "ðŸ‡µðŸ‡¼",
            "PG": "ðŸ‡µðŸ‡¬",
            "PL": "ðŸ‡µðŸ‡±",
            "PR": "ðŸ‡µðŸ‡·",
            "KP": "ðŸ‡°ðŸ‡µ",
            "PT": "ðŸ‡µðŸ‡¹",
            "PY": "ðŸ‡µðŸ‡¾",
            "PS": "ðŸ‡µðŸ‡¸",
            "PF": "ðŸ‡µðŸ‡«",
            "QA": "ðŸ‡¶ðŸ‡¦",
            "RE": "ðŸ‡·ðŸ‡ª",
            "RO": "ðŸ‡·ðŸ‡´",
            "RU": "ðŸ‡·ðŸ‡º",
            "RW": "ðŸ‡·ðŸ‡¼",
            "SA": "ðŸ‡¸ðŸ‡¦",
            "SD": "ðŸ‡¸ðŸ‡©",
            "SN": "ðŸ‡¸ðŸ‡³",
            "SG": "ðŸ‡¸ðŸ‡¬",
            "GS": "ðŸ‡¬ðŸ‡¸",
            "SJ": "ðŸ‡¸ðŸ‡¯",
            "SB": "ðŸ‡¸ðŸ‡§",
            "SL": "ðŸ‡¸ðŸ‡±",
            "SV": "ðŸ‡¸ðŸ‡»",
            "SM": "ðŸ‡¸ðŸ‡²",
            "SO": "ðŸ‡¸ðŸ‡´",
            "PM": "ðŸ‡µðŸ‡²",
            "RS": "ðŸ‡·ðŸ‡¸",
            "SS": "ðŸ‡¸ðŸ‡¸",
            "ST": "ðŸ‡¸ðŸ‡¹",
            "SR": "ðŸ‡¸ðŸ‡·",
            "SK": "ðŸ‡¸ðŸ‡°",
            "SI": "ðŸ‡¸ðŸ‡®",
            "SE": "ðŸ‡¸ðŸ‡ª",
            "SZ": "ðŸ‡¸ðŸ‡¿",
            "SX": "ðŸ‡¸ðŸ‡½",
            "SC": "ðŸ‡¸ðŸ‡¨",
            "SY": "ðŸ‡¸ðŸ‡¾",
            "TC": "ðŸ‡¹ðŸ‡¨",
            "TD": "ðŸ‡¹ðŸ‡©",
            "TG": "ðŸ‡¹ðŸ‡¬",
            "TH": "ðŸ‡¹ðŸ‡­",
            "TJ": "ðŸ‡¹ðŸ‡¯",
            "TK": "ðŸ‡¹ðŸ‡°",
            "TM": "ðŸ‡¹ðŸ‡²",
            "TL": "ðŸ‡¹ðŸ‡±",
            "TO": "ðŸ‡¹ðŸ‡´",
            "TT": "ðŸ‡¹ðŸ‡¹",
            "TN": "ðŸ‡¹ðŸ‡³",
            "TR": "ðŸ‡¹ðŸ‡·",
            "TV": "ðŸ‡¹ðŸ‡»",
            "TW": "ðŸ‡¹ðŸ‡¼",
            "TZ": "ðŸ‡¹ðŸ‡¿",
            "UG": "ðŸ‡ºðŸ‡¬",
            "UA": "ðŸ‡ºðŸ‡¦",
            "UM": "ðŸ‡ºðŸ‡²",
            "UY": "ðŸ‡ºðŸ‡¾",
            "US": "ðŸ‡ºðŸ‡¸",
            "UZ": "ðŸ‡ºðŸ‡¿",
            "VA": "ðŸ‡»ðŸ‡¦",
            "VC": "ðŸ‡»ðŸ‡¨",
            "VE": "ðŸ‡»ðŸ‡ª",
            "VG": "ðŸ‡»ðŸ‡¬",
            "VI": "ðŸ‡»ðŸ‡®",
            "VN": "ðŸ‡»ðŸ‡³",
            "VU": "ðŸ‡»ðŸ‡º",
            "WF": "ðŸ‡¼ðŸ‡«",
            "WS": "ðŸ‡¼ðŸ‡¸",
            "YE": "ðŸ‡¾ðŸ‡ª",
            "ZA": "ðŸ‡¿ðŸ‡¦",
            "ZM": "ðŸ‡¿ðŸ‡²",
            "ZW": "ðŸ‡¿ðŸ‡¼"
        }

    def generate(self, tokens: Tuple[str, ...], country: str = None) -> List[Tuple[str, ...]]:
        if len(''.join(tokens)) == 0:
            return []

        if country is None or country.upper() not in self.country2emoji:
            return []

        flag = self.country2emoji[country.upper()]
        return (tokens + (flag,), (flag,) + tokens)

    def generate2(self, name: InputName, interpretation: Interpretation) -> List[Tuple[str, ...]]:
        return self.generate(**self.prepare_arguments(name, interpretation))

    def prepare_arguments(self, name: InputName, interpretation: Interpretation):
        try:
            country = name.params['country'].upper()
        except:
            country = None
        return {'tokens': (name.strip_eth_namehash_unicode_replace_invalid,), 'country': country}
