import pytest
from generator.generation.substringmatch_generator import HAS_SUFFIX_TREE


if not HAS_SUFFIX_TREE:
    pytest.skip('Suffix tree not available', allow_module_level=True)


from suffixtree import SuffixQueryTree


@pytest.mark.xfail
def test_bug():
    data = [

        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000001',
        '000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000001',
        '0000000000000000000000000000000000000000000000001', '000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000', '000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000', '0000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000001', '000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000', '00000000000000000000000000000000000000á´…',
        '000000000000000000000000000000000000', '00000000000000000000000000000000000',
        '0000000000000000000000000000000000', '000000000000000000000000000000000', '00000000000000000000000000000000',
        '0000000000000000000000000000000', '0000000000000000000000000000001', '000000000000000000000000000000',
        '00000000000000000000000000000', '0000000000000000000000000000', '000000000000000000000000000',
        '0000000000000000000000000', '0000000000000000000000001', '000000000000000000000000', '00000000000000000000000',
        '00000000000000000000001', '0000000000000000000000', '0000000000000000000001', '000000000000000000000']

    tree = SuffixQueryTree(False, data)
    inds = tree.findStringIdx('0')
    result = [data[i] for i in inds]
    assert '00000000000000000000000' in result
