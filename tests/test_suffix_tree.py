import pytest
from name_graph.utils.unisuffixtree import HAS_SUFFIX_TREE

if not HAS_SUFFIX_TREE:
    pytest.skip('Suffix tree not available', allow_module_level=True)

from name_graph.utils.unisuffixtree import UniSuffixTree
from name_graph.utils.suffixtree import SuffixQueryTree


def test_bug():
    data = [

        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000001',
        '000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000001',
        '0000000000000000000000000000000000000000000000001', '000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000', '000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000', '0000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000001', '000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000',
        '00000000000000000000000000000000000000ᴅ',
        '000000000000000000000000000000000000', '00000000000000000000000000000000000',
        '0000000000000000000000000000000000', '000000000000000000000000000000000', '00000000000000000000000000000000',
        '0000000000000000000000000000000', '0000000000000000000000000000001', '000000000000000000000000000000',
        '00000000000000000000000000000', '0000000000000000000000000000', '000000000000000000000000000',
        '0000000000000000000000000', '0000000000000000000000001', '000000000000000000000000', '00000000000000000000000',
        '00000000000000000000001', '0000000000000000000000', '0000000000000000000001', '000000000000000000000']

    tree = UniSuffixTree(data)
    inds = tree.findStringIdx('0')
    result = [data[i] for i in inds]
    assert '00000000000000000000000' in result


def test_bug2():
    data = [

        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000000000001',
        '000000000000000000000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000000000000000001',
        '0000000000000000000000000000000000000000000000001', '000000000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000000000', '000000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000000', '0000000000000000000000000000000000000000',
        '0000000000000000000000000000000000000001', '000000000000000000000000000000000000000',
        '00000000000000000000000000000000000000',
        # '00000000000000000000000000000000000000ᴅ',
        '000000000000000000000000000000000000', '00000000000000000000000000000000000',
        '0000000000000000000000000000000000', '000000000000000000000000000000000', '00000000000000000000000000000000',
        '0000000000000000000000000000000', '0000000000000000000000000000001', '000000000000000000000000000000',
        '00000000000000000000000000000', '0000000000000000000000000000', '000000000000000000000000000',
        '0000000000000000000000000', '0000000000000000000000001', '000000000000000000000000', '00000000000000000000000',
        '00000000000000000000001', '0000000000000000000000', '0000000000000000000001', '000000000000000000000']

    tree = SuffixQueryTree(False, data)
    assert not tree.findStringIdx('\x7f')
    assert len(tree.getStrings()) == len(data)
